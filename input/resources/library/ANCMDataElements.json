{
  "resourceType": "Library",
  "id": "ANCMDataElements",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/smart-anc-mini/Library/ANCMDataElements",
  "name": "ANCMDataElements",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FC",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/Library/FHIRCommon"
  }, {
    "type": "depends-on",
    "display": "Library WC",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/Library/WHOCommon"
  }, {
    "type": "depends-on",
    "display": "Library AC",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/Library/ANCMCommon"
  }, {
    "type": "depends-on",
    "display": "Library Cx",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/Library/ANCMConcepts"
  }, {
    "type": "depends-on",
    "display": "Code system ANCM Concept Codes",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/CodeSystem/concept-codes"
  }, {
    "type": "depends-on",
    "display": "Value set Reason for coming to facility Codes Grouper",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-b5-de1-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Co-habitants Codes",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-a-de14"
  }, {
    "type": "depends-on",
    "display": "Value set Danger signs Codes Grouper",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-b5-de48-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Specific health concern(s) Codes",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-b5-de6"
  }, {
    "type": "depends-on",
    "display": "Value set Reason for closing ANC record Codes",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-end-2"
  }, {
    "type": "depends-on",
    "display": "Value set Place of delivery Codes",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-end-14"
  }, {
    "type": "depends-on",
    "display": "Value set Delivery mode Codes",
    "resource": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-end-19"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Contact date",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Reason for coming to facility",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "ANC contact number",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Unique identification",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Patient"
  }, {
    "name": "First name",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Patient"
  }, {
    "name": "Last name",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Patient"
  }, {
    "name": "Date of birth",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Patient"
  }, {
    "name": "Address",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Patient"
  }, {
    "name": "Mobile phone number",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Patient"
  }, {
    "name": "Alternative contact's name",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Patient"
  }, {
    "name": "Alternative contact's phone number",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Patient"
  }, {
    "name": "Woman wants to receive reminders during pregnancy",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Patient"
  }, {
    "name": "Co-habitants",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Pregnancy confirmed",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Danger signs",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Specific health concern(s)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason for closing ANC record",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Delivery date",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Place of delivery",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Preterm Birth",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Delivery mode",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Birth weight",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "type" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-b5-de1-codes-grouper"
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "type", "status", "location" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-end-14"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-a-de14"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/who/smart-anc-mini/CodeSystem/concept-codes",
        "code": "ANC.B4.DE1",
        "display": "Pregnancy confirmed"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-b5-de48-codes-grouper"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-b5-de6"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-end-2"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/who/smart-anc-mini/CodeSystem/concept-codes",
        "code": "ANC.End.12",
        "display": "Delivery date"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/who/smart-anc-mini/CodeSystem/concept-codes",
        "code": "ANC.End.17",
        "display": "Preterm Birth"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/smart-anc-mini/ValueSet/anc-end-19"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/who/smart-anc-mini/CodeSystem/concept-codes",
        "code": "ANC.End.23",
        "display": "Birth weight"
      } ]
    } ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBBTkNNRGF0YUVsZW1lbnRzDQoNCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnDQoNCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjEnDQppbmNsdWRlIEZISVJDb21tb24gY2FsbGVkIEZDDQoNCmluY2x1ZGUgV0hPQ29tbW9uIGNhbGxlZCBXQw0KaW5jbHVkZSBBTkNNQ29tbW9uIGNhbGxlZCBBQw0KaW5jbHVkZSBBTkNNQ29uY2VwdHMgY2FsbGVkIEN4DQoNCmNvbnRleHQgUGF0aWVudA0KDQovKg0KICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFNCBDb250YWN0IGRhdGUNCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzDQogIEBkZXNjcmlwdGlvbjogVGhlIGRhdGUgYW5kIHRpbWUgb2YgdGhlIGNsaWVudCdzIGNvbnRhY3QNCiovDQpkZWZpbmUgIkNvbnRhY3QgZGF0ZSI6DQogIFtFbmNvdW50ZXJdDQoNCi8qDQogIEBkYXRhRWxlbWVudDogQU5DLkI1LkRFMSBSZWFzb24gZm9yIGNvbWluZyB0byBmYWNpbGl0eQ0KICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMNCiAgQGRlc2NyaXB0aW9uOiBSZWNvcmRzIHRoZSByZWFzb24gd2h5IHRoZSB3b21hbiBjYW1lIHRvIHRoZSBoZWFsdGgtY2FyZSBmYWNpbGl0eSB0b2RheQ0KKi8NCmRlZmluZSAiUmVhc29uIGZvciBjb21pbmcgdG8gZmFjaWxpdHkiOg0KICBbRW5jb3VudGVyOiBDeC4iUmVhc29uIGZvciBjb21pbmcgdG8gZmFjaWxpdHkgQ29kZXMgR3JvdXBlciJdDQoNCi8qDQogIEBkYXRhRWxlbWVudDogQU5DLkEuREUxMiBBTkMgY29udGFjdCBudW1iZXINCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzDQogIEBkZXNjcmlwdGlvbjogVGhlIEFOQyBjb250YWN0IG9yIHZpc2l0IG51bWJlciDigJMgcmVjb21tZW5kZWQgbWluaW11bSBpcyA4IGNvbnRhY3RzDQoqLw0KZGVmaW5lICJBTkMgY29udGFjdCBudW1iZXIiOg0KICBbRW5jb3VudGVyXQ0KDQovKg0KICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFMSBVbmlxdWUgaWRlbnRpZmljYXRpb24NCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzDQogIEBkZXNjcmlwdGlvbjogVW5pcXVlIGlkZW50aWZpZXIgZ2VuZXJhdGVkIGZvciBuZXcgY2xpZW50cyBvciBhIHVuaXZlcnNhbCBJRCwgaWYgdXNlZCBpbiB0aGUgY291bnRyeQ0KKi8NCmRlZmluZSAiVW5pcXVlIGlkZW50aWZpY2F0aW9uIjoNCiAgW1BhdGllbnRdDQoNCi8qDQogIEBkYXRhRWxlbWVudDogQU5DLkEuREUyIEZpcnN0IG5hbWUNCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzDQogIEBkZXNjcmlwdGlvbjogQ2xpZW50J3MgZmlyc3QgbmFtZQ0KKi8NCmRlZmluZSAiRmlyc3QgbmFtZSI6DQogIFtQYXRpZW50XQ0KDQovKg0KICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFMyBMYXN0IG5hbWUNCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzDQogIEBkZXNjcmlwdGlvbjogQ2xpZW50J3MgZmFtaWx5IG5hbWUgb3IgbGFzdCBuYW1lDQoqLw0KZGVmaW5lICJMYXN0IG5hbWUiOg0KICBbUGF0aWVudF0NCg0KLyoNCiAgQGRhdGFFbGVtZW50OiBBTkMuQS5ERTUgRGF0ZSBvZiBiaXJ0aA0KICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMNCiAgQGRlc2NyaXB0aW9uOiBUaGUgY2xpZW50J3MgZGF0ZSBvZiBiaXJ0aCAoRE9CKSwgaWYga25vd24NCiovDQpkZWZpbmUgIkRhdGUgb2YgYmlydGgiOg0KICBbUGF0aWVudF0NCg0KLyoNCiAgQGRhdGFFbGVtZW50OiBBTkMuQS5ERTcgQWRkcmVzcw0KICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMNCiAgQGRlc2NyaXB0aW9uOiBDbGllbnQncyBob21lIGFkZHJlc3Mgb3IgYWRkcmVzcyB0aGF0IHRoZSBjbGllbnQgaXMgY29uc2VudGluZyB0byBkaXNjbG9zZQ0KKi8NCmRlZmluZSAiQWRkcmVzcyI6DQogIFtQYXRpZW50XQ0KDQovKg0KICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFOCBNb2JpbGUgcGhvbmUgbnVtYmVyDQogIEBhY3Rpdml0eTogQU5DLkE0IEdhdGhlciBjbGllbnQgZGV0YWlscw0KICBAZGVzY3JpcHRpb246IENsaWVudCdzIG1vYmlsZSBwaG9uZSBudW1iZXINCiovDQpkZWZpbmUgIk1vYmlsZSBwaG9uZSBudW1iZXIiOg0KICBbUGF0aWVudF0NCg0KLyoNCiAgQGRhdGFFbGVtZW50OiBBTkMuQS5ERTEwIEFsdGVybmF0aXZlIGNvbnRhY3QncyBuYW1lDQogIEBhY3Rpdml0eTogQU5DLkE0IEdhdGhlciBjbGllbnQgZGV0YWlscw0KICBAZGVzY3JpcHRpb246IE5hbWUgb2YgYW4gYWx0ZXJuYXRpdmUgY29udGFjdCwgd2hpY2ggY291bGQgYmUgbmV4dCBvZiBraW4gKGUuZy4gcGFydG5lciwgbW90aGVyLCBzaWJsaW5nKTsgdGhlIGFsdGVybmF0aXZlIGNvbnRhY3Qgd291bGQgYmUgdXNlZCBpbiB0aGUgY2FzZSBvZiBhbiBlbWVyZ2VuY3kgc2l0dWF0aW9uDQoqLw0KZGVmaW5lICJBbHRlcm5hdGl2ZSBjb250YWN0J3MgbmFtZSI6DQogIFtQYXRpZW50XQ0KDQovKg0KICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFMTEgQWx0ZXJuYXRpdmUgY29udGFjdCdzIHBob25lIG51bWJlcg0KICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMNCiAgQGRlc2NyaXB0aW9uOiBQaG9uZSBudW1iZXIgb2YgdGhlIGFsdGVybmF0aXZlIGNvbnRhY3QNCiovDQpkZWZpbmUgIkFsdGVybmF0aXZlIGNvbnRhY3QncyBwaG9uZSBudW1iZXIiOg0KICBbUGF0aWVudF0NCg0KLyoNCiAgQGRhdGFFbGVtZW50OiBBTkMuQS5ERTkgV29tYW4gd2FudHMgdG8gcmVjZWl2ZSByZW1pbmRlcnMgZHVyaW5nIHByZWduYW5jeQ0KICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMNCiAgQGRlc2NyaXB0aW9uOiBXaGV0aGVyIG9yIG5vdCB0aGUgd29tYW4gd2FudHMgdG8gcmVjZWl2ZSBTTVMgb3Igb3RoZXIgbWVzc2FnZXMgcmVnYXJkaW5nIGhlciBBTkMgY29udGFjdHMgYW5kIGhlYWx0aCBzdGF0dXMgZHVyaW5nIHByZWduYW5jeQ0KKi8NCmRlZmluZSAiV29tYW4gd2FudHMgdG8gcmVjZWl2ZSByZW1pbmRlcnMgZHVyaW5nIHByZWduYW5jeSI6DQogIFtQYXRpZW50XQ0KDQovKg0KICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFMTMgQ28taGFiaXRhbnRzDQogIEBhY3Rpdml0eTogQU5DLkE3IENyZWF0ZSBjbGllbnQgcmVjb3JkP09SP0FOQy5BOC4gVmFsaWRhdGUgY2xpZW50IGRldGFpbHMNCiAgQGRlc2NyaXB0aW9uOiBXaG8gZG9lcyB0aGUgY2xpZW50IGxpdmUgd2l0aD8gSXQgaXMgaW1wb3J0YW50IHRvIGtub3cgd2hldGhlciBjbGllbnQgbGl2ZXMgd2l0aCBwYXJlbnRzLCBvdGhlciBmYW1pbHkgbWVtYmVycywgYSBwYXJ0bmVyLCBmcmllbmRzLCBldGMuDQoqLw0KZGVmaW5lICJDby1oYWJpdGFudHMiOg0KICBbT2JzZXJ2YXRpb246IEN4LiJDby1oYWJpdGFudHMgQ29kZXMiXQ0KDQovKg0KICBAZGF0YUVsZW1lbnQ6IEFOQy5CNC5ERTEgUHJlZ25hbmN5IGNvbmZpcm1lZA0KICBAYWN0aXZpdHk6IEFOQy5CNCBDb25maXJtIHByZWduYW5jeQ0KICBAZGVzY3JpcHRpb246IFByZWduYW5jeSBoYXMgYmVlbiBjb25maXJtZWQNCiovDQpkZWZpbmUgIlByZWduYW5jeSBjb25maXJtZWQiOg0KICBbT2JzZXJ2YXRpb246IEN4LiJQcmVnbmFuY3kgY29uZmlybWVkIl0NCg0KLyoNCiAgQGRhdGFFbGVtZW50OiBBTkMuQjUuREU0OCBEYW5nZXIgc2lnbnMNCiAgQGFjdGl2aXR5OiBBTkMuQjUgUXVpY2sgY2hlY2sNCiAgQGRlc2NyaXB0aW9uOiBCZWZvcmUgZWFjaCBjb250YWN0LCB0aGUgaGVhbHRoIHdvcmtlciBzaG91bGQgY2hlY2sgd2hldGhlciB0aGUgd29tYW4gaGFzIGFueSBvZiB0aGUgZGFuZ2VyIHNpZ25zIGxpc3RlZCBoZXJlIOKAkyBpZiB5ZXMsIHNoZSBzaG91bGQgcmVmZXIgdG8gdGhlIGhvc3BpdGFsIHVyZ2VudGx5OyBpZiBubywgc2hlIHNob3VsZCBjb250aW51ZSB0byB0aGUgbm9ybWFsIGNvbnRhY3QNCiovDQpkZWZpbmUgIkRhbmdlciBzaWducyI6DQogIFtPYnNlcnZhdGlvbjogQ3guIkRhbmdlciBzaWducyBDb2RlcyBHcm91cGVyIl0NCg0KLyoNCiAgQGRhdGFFbGVtZW50OiBBTkMuQjUuREU1IFNwZWNpZmljIGhlYWx0aCBjb25jZXJuKHMpDQogIEBhY3Rpdml0eTogQU5DLkI1IFF1aWNrIGNoZWNrDQogIEBkZXNjcmlwdGlvbjogSWYgdGhlIHdvbWFuIGNhbWUgdG8gdGhlIGZhY2lsaXR5IHdpdGggYSBzcGVjaWZpYyBoZWFsdGggY29uY2Vybiwgc2VsZWN0IHRoZSBoZWFsdGggY29uY2VybihzKSBmcm9tIHRoZSBsaXN0DQoqLw0KZGVmaW5lICJTcGVjaWZpYyBoZWFsdGggY29uY2VybihzKSI6DQogIFtPYnNlcnZhdGlvbjogQ3guIlNwZWNpZmljIGhlYWx0aCBjb25jZXJuKHMpIENvZGVzIl0NCg0KLyoNCiAgQGRhdGFFbGVtZW50OiBBTkMuRW5kLjEgUmVhc29uIGZvciBjbG9zaW5nIEFOQyByZWNvcmQNCiAgQGFjdGl2aXR5OiBBTkMuRW5kIEVuZA0KICBAZGVzY3JpcHRpb246IFNlbGVjdCB0aGUgcmVhc29uIHdoeSB5b3UgYXJlIGNsb3NpbmcgdGhlIHdvbWFuJ3MgQU5DIHJlY29yZA0KKi8NCmRlZmluZSAiUmVhc29uIGZvciBjbG9zaW5nIEFOQyByZWNvcmQiOg0KICBbT2JzZXJ2YXRpb246IEN4LiJSZWFzb24gZm9yIGNsb3NpbmcgQU5DIHJlY29yZCBDb2RlcyJdDQoNCi8qDQogIEBkYXRhRWxlbWVudDogQU5DLkVuZC4xMiBEZWxpdmVyeSBkYXRlDQogIEBhY3Rpdml0eTogQU5DLkVuZCBFbmQNCiAgQGRlc2NyaXB0aW9uOiBEYXRlIG9uIHdoaWNoIHRoZSB3b21hbiBkZWxpdmVyZWQNCiovDQpkZWZpbmUgIkRlbGl2ZXJ5IGRhdGUiOg0KICBbT2JzZXJ2YXRpb246IEN4LiJEZWxpdmVyeSBkYXRlIl0NCg0KLyoNCiAgQGRhdGFFbGVtZW50OiBBTkMuRW5kLjEzIFBsYWNlIG9mIGRlbGl2ZXJ5DQogIEBhY3Rpdml0eTogQU5DLkVuZCBFbmQNCiAgQGRlc2NyaXB0aW9uOiBQbGFjZSB3aGVyZSB0aGUgd29tYW4gZGVsaXZlcmVkDQoqLw0KZGVmaW5lICJQbGFjZSBvZiBkZWxpdmVyeSI6DQogIFtFbmNvdW50ZXI6IEN4LiJQbGFjZSBvZiBkZWxpdmVyeSBDb2RlcyJdIEUNCiAgICB3aGVyZSBFLnN0YXR1cyA9ICdmaW5pc2hlZCcNCiAgICByZXR1cm4gRS5sb2NhdGlvbi5sb2NhdGlvbg0KDQoNCi8qDQogIEBkYXRhRWxlbWVudDogQU5DLkVuZC4xNyBQcmV0ZXJtIEJpcnRoDQogIEBhY3Rpdml0eTogQU5DLkVuZCBFbmQNCiAgQGRlc2NyaXB0aW9uOiBUaGUgd29tYW4gZ2F2ZSBiaXJ0aCB3aGVuIHRoZSBnZXN0YXRpb25hbCBhZ2Ugd2FzIGxlc3MgdGhhbiAzNyB3ZWVrcw0KKi8NCmRlZmluZSAiUHJldGVybSBCaXJ0aCI6DQogIFtPYnNlcnZhdGlvbjogQ3guIlByZXRlcm0gQmlydGgiXQ0KDQovKg0KICBAZGF0YUVsZW1lbnQ6IEFOQy5FbmQuMTggRGVsaXZlcnkgbW9kZQ0KICBAYWN0aXZpdHk6IEFOQy5FbmQgRW5kDQogIEBkZXNjcmlwdGlvbjogSG93IHRoZSB3b21hbiBnYXZlIGJpcnRoL2RlbGl2ZXJlZA0KKi8NCmRlZmluZSAiRGVsaXZlcnkgbW9kZSI6DQogIFtPYnNlcnZhdGlvbjogQ3guIkRlbGl2ZXJ5IG1vZGUgQ29kZXMiXQ0KDQovKg0KICBAZGF0YUVsZW1lbnQ6IEFOQy5FbmQuMjMgQmlydGggd2VpZ2h0DQogIEBhY3Rpdml0eTogQU5DLkVuZCBFbmQNCiAgQGRlc2NyaXB0aW9uOiBFbnRlciB0aGUgYmlydGggd2VpZ2h0IG9mIHRoZSBiYWJ5IGluIGtnDQoqLw0KZGVmaW5lICJCaXJ0aCB3ZWlnaHQiOg0KICBbT2JzZXJ2YXRpb246IEN4LiJCaXJ0aCB3ZWlnaHQiXQ0KDQo="
  }, {
    "contentType": "application/elm+xml",
    "data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxsaWJyYXJ5IHhtbG5zPSJ1cm46aGw3LW9yZzplbG06cjEiIHhtbG5zOnQ9InVybjpobDctb3JnOmVsbS10eXBlczpyMSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6eHNkPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6Zmhpcj0iaHR0cDovL2hsNy5vcmcvZmhpciIgeG1sbnM6cWRtNDM9InVybjpoZWFsdGhpdC1nb3Y6cWRtOnY0XzMiIHhtbG5zOnFkbTUzPSJ1cm46aGVhbHRoaXQtZ292OnFkbTp2NV8zIiB4bWxuczphPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiPg0KICAgPGFubm90YXRpb24gdHJhbnNsYXRvclZlcnNpb249IjIuNy4wIiB0cmFuc2xhdG9yT3B0aW9ucz0iRW5hYmxlQW5ub3RhdGlvbnMsRW5hYmxlTG9jYXRvcnMsRGlzYWJsZUxpc3REZW1vdGlvbixEaXNhYmxlTGlzdFByb21vdGlvbiIgeHNpOnR5cGU9ImE6Q3FsVG9FbG1JbmZvIi8+DQogICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgIDxhOnMgcj0iNjAiPg0KICAgICAgICAgPGE6cz5saWJyYXJ5IEFOQ01EYXRhRWxlbWVudHM8L2E6cz4NCiAgICAgIDwvYTpzPg0KICAgPC9hbm5vdGF0aW9uPg0KICAgPGlkZW50aWZpZXIgaWQ9IkFOQ01EYXRhRWxlbWVudHMiIHN5c3RlbT0iaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtYW5jLW1pbmkiLz4NCiAgIDxzY2hlbWFJZGVudGlmaWVyIGlkPSJ1cm46aGw3LW9yZzplbG0iIHZlcnNpb249InIxIi8+DQogICA8dXNpbmdzPg0KICAgICAgPGRlZiBsb2NhbElkZW50aWZpZXI9IlN5c3RlbSIgdXJpPSJ1cm46aGw3LW9yZzplbG0tdHlwZXM6cjEiLz4NCiAgICAgIDxkZWYgbG9jYWxJZD0iMSIgbG9jYXRvcj0iMzoxLTM6MjYiIGxvY2FsSWRlbnRpZmllcj0iRkhJUiIgdXJpPSJodHRwOi8vaGw3Lm9yZy9maGlyIiB2ZXJzaW9uPSI0LjAuMSI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnMgcj0iMSI+DQogICAgICAgICAgICAgICA8YTpzPnVzaW5nIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnM+RkhJUjwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzPiB2ZXJzaW9uICc0LjAuMSc8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgPC9kZWY+DQogICA8L3VzaW5ncz4NCiAgIDxpbmNsdWRlcz4NCiAgICAgIDxkZWYgbG9jYWxJZD0iMiIgbG9jYXRvcj0iNToxLTU6MzUiIGxvY2FsSWRlbnRpZmllcj0iRkhJUkhlbHBlcnMiIHBhdGg9Imh0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWFuYy1taW5pL0ZISVJIZWxwZXJzIiB2ZXJzaW9uPSI0LjAuMSI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnMgcj0iMiI+DQogICAgICAgICAgICAgICA8YTpzPmluY2x1ZGUgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz5GSElSSGVscGVyczwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzPiB2ZXJzaW9uICc0LjAuMSc8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIGxvY2FsSWQ9IjMiIGxvY2F0b3I9IjY6MS02OjI4IiBsb2NhbElkZW50aWZpZXI9IkZDIiBwYXRoPSJodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1hbmMtbWluaS9GSElSQ29tbW9uIj4NCiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPg0KICAgICAgICAgICAgPGE6cyByPSIzIj4NCiAgICAgICAgICAgICAgIDxhOnM+aW5jbHVkZSA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnM+DQogICAgICAgICAgICAgICAgICA8YTpzPkZISVJDb21tb248L2E6cz4NCiAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cz4gY2FsbGVkIEZDPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBsb2NhbElkPSI0IiBsb2NhdG9yPSI4OjEtODoyNyIgbG9jYWxJZGVudGlmaWVyPSJXQyIgcGF0aD0iaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtYW5jLW1pbmkvV0hPQ29tbW9uIj4NCiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPg0KICAgICAgICAgICAgPGE6cyByPSI0Ij4NCiAgICAgICAgICAgICAgIDxhOnM+aW5jbHVkZSA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnM+DQogICAgICAgICAgICAgICAgICA8YTpzPldIT0NvbW1vbjwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzPiBjYWxsZWQgV0M8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIGxvY2FsSWQ9IjUiIGxvY2F0b3I9Ijk6MS05OjI4IiBsb2NhbElkZW50aWZpZXI9IkFDIiBwYXRoPSJodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1hbmMtbWluaS9BTkNNQ29tbW9uIj4NCiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPg0KICAgICAgICAgICAgPGE6cyByPSI1Ij4NCiAgICAgICAgICAgICAgIDxhOnM+aW5jbHVkZSA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnM+DQogICAgICAgICAgICAgICAgICA8YTpzPkFOQ01Db21tb248L2E6cz4NCiAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cz4gY2FsbGVkIEFDPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBsb2NhbElkPSI2IiBsb2NhdG9yPSIxMDoxLTEwOjMwIiBsb2NhbElkZW50aWZpZXI9IkN4IiBwYXRoPSJodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1hbmMtbWluaS9BTkNNQ29uY2VwdHMiPg0KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+DQogICAgICAgICAgICA8YTpzIHI9IjYiPg0KICAgICAgICAgICAgICAgPGE6cz5pbmNsdWRlIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnM+QU5DTUNvbmNlcHRzPC9hOnM+DQogICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnM+IGNhbGxlZCBDeDwvYTpzPg0KICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICA8L2Fubm90YXRpb24+DQogICAgICA8L2RlZj4NCiAgIDwvaW5jbHVkZXM+DQogICA8Y29udGV4dHM+DQogICAgICA8ZGVmIGxvY2F0b3I9IjEyOjEtMTI6MTUiIG5hbWU9IlBhdGllbnQiLz4NCiAgIDwvY29udGV4dHM+DQogICA8c3RhdGVtZW50cz4NCiAgICAgIDxkZWYgbG9jYXRvcj0iMTI6MS0xMjoxNSIgbmFtZT0iUGF0aWVudCIgY29udGV4dD0iUGF0aWVudCI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iU2luZ2xldG9uRnJvbSI+DQogICAgICAgICAgICA8b3BlcmFuZCBsb2NhdG9yPSIxMjoxLTEyOjE1IiBkYXRhVHlwZT0iZmhpcjpQYXRpZW50IiB0ZW1wbGF0ZUlkPSJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUGF0aWVudCIgeHNpOnR5cGU9IlJldHJpZXZlIi8+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbG9jYWxJZD0iOCIgbG9jYXRvcj0iMTk6MS0yMDoxMyIgbmFtZT0iQ29udGFjdCBkYXRlIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkYXRhRWxlbWVudCIgdmFsdWU9IkFOQy5BLkRFNCBDb250YWN0IGRhdGUiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iVGhlIGRhdGUgYW5kIHRpbWUgb2YgdGhlIGNsaWVudCdzIGNvbnRhY3QiLz4NCiAgICAgICAgICAgIDxhOnMgcj0iOCI+DQogICAgICAgICAgICAgICA8YTpzPi8qCiAgQGRhdGFFbGVtZW50OiBBTkMuQS5ERTQgQ29udGFjdCBkYXRlCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzCiAgQGRlc2NyaXB0aW9uOiBUaGUgZGF0ZSBhbmQgdGltZSBvZiB0aGUgY2xpZW50J3MgY29udGFjdAoqLwpkZWZpbmUgJnF1b3Q7Q29udGFjdCBkYXRlJnF1b3Q7OgogIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cyByPSI3Ij4NCiAgICAgICAgICAgICAgICAgIDxhOnM+W0VuY291bnRlcl08L2E6cz4NCiAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICA8L2Fubm90YXRpb24+DQogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSI3IiBsb2NhdG9yPSIyMDozLTIwOjEzIiBkYXRhVHlwZT0iZmhpcjpFbmNvdW50ZXIiIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9FbmNvdW50ZXIiIHhzaTp0eXBlPSJSZXRyaWV2ZSIvPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIGxvY2FsSWQ9IjEwIiBsb2NhdG9yPSIyNzoxLTI4OjYzIiBuYW1lPSJSZWFzb24gZm9yIGNvbWluZyB0byBmYWNpbGl0eSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGF0YUVsZW1lbnQiIHZhbHVlPSJBTkMuQjUuREUxIFJlYXNvbiBmb3IgY29taW5nIHRvIGZhY2lsaXR5Ii8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImFjdGl2aXR5IiB2YWx1ZT0iQU5DLkE0IEdhdGhlciBjbGllbnQgZGV0YWlscyIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkZXNjcmlwdGlvbiIgdmFsdWU9IlJlY29yZHMgdGhlIHJlYXNvbiB3aHkgdGhlIHdvbWFuIGNhbWUgdG8gdGhlIGhlYWx0aC1jYXJlIGZhY2lsaXR5IHRvZGF5Ii8+DQogICAgICAgICAgICA8YTpzIHI9IjEwIj4NCiAgICAgICAgICAgICAgIDxhOnM+LyoKICBAZGF0YUVsZW1lbnQ6IEFOQy5CNS5ERTEgUmVhc29uIGZvciBjb21pbmcgdG8gZmFjaWxpdHkKICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMKICBAZGVzY3JpcHRpb246IFJlY29yZHMgdGhlIHJlYXNvbiB3aHkgdGhlIHdvbWFuIGNhbWUgdG8gdGhlIGhlYWx0aC1jYXJlIGZhY2lsaXR5IHRvZGF5CiovCmRlZmluZSAmcXVvdDtSZWFzb24gZm9yIGNvbWluZyB0byBmYWNpbGl0eSZxdW90OzoKICA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnMgcj0iOSI+DQogICAgICAgICAgICAgICAgICA8YTpzPltFbmNvdW50ZXI6IDwvYTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz4NCiAgICAgICAgICAgICAgICAgICAgIDxhOnM+Q3guJnF1b3Q7UmVhc29uIGZvciBjb21pbmcgdG8gZmFjaWxpdHkgQ29kZXMgR3JvdXBlciZxdW90OzwvYTpzPg0KICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICA8YTpzPl08L2E6cz4NCiAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICA8L2Fubm90YXRpb24+DQogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSI5IiBsb2NhdG9yPSIyODozLTI4OjYzIiBkYXRhVHlwZT0iZmhpcjpFbmNvdW50ZXIiIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9FbmNvdW50ZXIiIGNvZGVQcm9wZXJ0eT0idHlwZSIgY29kZUNvbXBhcmF0b3I9ImluIiB4c2k6dHlwZT0iUmV0cmlldmUiPg0KICAgICAgICAgICAgPGNvZGVzIGxvY2F0b3I9IjI4OjE1LTI4OjYyIiBuYW1lPSJSZWFzb24gZm9yIGNvbWluZyB0byBmYWNpbGl0eSBDb2RlcyBHcm91cGVyIiBsaWJyYXJ5TmFtZT0iQ3giIHhzaTp0eXBlPSJWYWx1ZVNldFJlZiIvPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIGxvY2FsSWQ9IjEyIiBsb2NhdG9yPSIzNToxLTM2OjEzIiBuYW1lPSJBTkMgY29udGFjdCBudW1iZXIiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRhdGFFbGVtZW50IiB2YWx1ZT0iQU5DLkEuREUxMiBBTkMgY29udGFjdCBudW1iZXIiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iVGhlIEFOQyBjb250YWN0IG9yIHZpc2l0IG51bWJlciDigJMgcmVjb21tZW5kZWQgbWluaW11bSBpcyA4IGNvbnRhY3RzIi8+DQogICAgICAgICAgICA8YTpzIHI9IjEyIj4NCiAgICAgICAgICAgICAgIDxhOnM+LyoKICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFMTIgQU5DIGNvbnRhY3QgbnVtYmVyCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzCiAgQGRlc2NyaXB0aW9uOiBUaGUgQU5DIGNvbnRhY3Qgb3IgdmlzaXQgbnVtYmVyIOKAkyByZWNvbW1lbmRlZCBtaW5pbXVtIGlzIDggY29udGFjdHMKKi8KZGVmaW5lICZxdW90O0FOQyBjb250YWN0IG51bWJlciZxdW90OzoKICA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnMgcj0iMTEiPg0KICAgICAgICAgICAgICAgICAgPGE6cz5bRW5jb3VudGVyXTwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjExIiBsb2NhdG9yPSIzNjozLTM2OjEzIiBkYXRhVHlwZT0iZmhpcjpFbmNvdW50ZXIiIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9FbmNvdW50ZXIiIHhzaTp0eXBlPSJSZXRyaWV2ZSIvPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIGxvY2FsSWQ9IjE0IiBsb2NhdG9yPSI0MzoxLTQ0OjExIiBuYW1lPSJVbmlxdWUgaWRlbnRpZmljYXRpb24iIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRhdGFFbGVtZW50IiB2YWx1ZT0iQU5DLkEuREUxIFVuaXF1ZSBpZGVudGlmaWNhdGlvbiIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJhY3Rpdml0eSIgdmFsdWU9IkFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGVzY3JpcHRpb24iIHZhbHVlPSJVbmlxdWUgaWRlbnRpZmllciBnZW5lcmF0ZWQgZm9yIG5ldyBjbGllbnRzIG9yIGEgdW5pdmVyc2FsIElELCBpZiB1c2VkIGluIHRoZSBjb3VudHJ5Ii8+DQogICAgICAgICAgICA8YTpzIHI9IjE0Ij4NCiAgICAgICAgICAgICAgIDxhOnM+LyoKICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFMSBVbmlxdWUgaWRlbnRpZmljYXRpb24KICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMKICBAZGVzY3JpcHRpb246IFVuaXF1ZSBpZGVudGlmaWVyIGdlbmVyYXRlZCBmb3IgbmV3IGNsaWVudHMgb3IgYSB1bml2ZXJzYWwgSUQsIGlmIHVzZWQgaW4gdGhlIGNvdW50cnkKKi8KZGVmaW5lICZxdW90O1VuaXF1ZSBpZGVudGlmaWNhdGlvbiZxdW90OzoKICA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnMgcj0iMTMiPg0KICAgICAgICAgICAgICAgICAgPGE6cz5bUGF0aWVudF08L2E6cz4NCiAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICA8L2Fubm90YXRpb24+DQogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSIxMyIgbG9jYXRvcj0iNDQ6My00NDoxMSIgZGF0YVR5cGU9ImZoaXI6UGF0aWVudCIgdGVtcGxhdGVJZD0iaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BhdGllbnQiIHhzaTp0eXBlPSJSZXRyaWV2ZSIvPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIGxvY2FsSWQ9IjE2IiBsb2NhdG9yPSI1MToxLTUyOjExIiBuYW1lPSJGaXJzdCBuYW1lIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkYXRhRWxlbWVudCIgdmFsdWU9IkFOQy5BLkRFMiBGaXJzdCBuYW1lIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImFjdGl2aXR5IiB2YWx1ZT0iQU5DLkE0IEdhdGhlciBjbGllbnQgZGV0YWlscyIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkZXNjcmlwdGlvbiIgdmFsdWU9IkNsaWVudCdzIGZpcnN0IG5hbWUiLz4NCiAgICAgICAgICAgIDxhOnMgcj0iMTYiPg0KICAgICAgICAgICAgICAgPGE6cz4vKgogIEBkYXRhRWxlbWVudDogQU5DLkEuREUyIEZpcnN0IG5hbWUKICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMKICBAZGVzY3JpcHRpb246IENsaWVudCdzIGZpcnN0IG5hbWUKKi8KZGVmaW5lICZxdW90O0ZpcnN0IG5hbWUmcXVvdDs6CiAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzIHI9IjE1Ij4NCiAgICAgICAgICAgICAgICAgIDxhOnM+W1BhdGllbnRdPC9hOnM+DQogICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iMTUiIGxvY2F0b3I9IjUyOjMtNTI6MTEiIGRhdGFUeXBlPSJmaGlyOlBhdGllbnQiIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9QYXRpZW50IiB4c2k6dHlwZT0iUmV0cmlldmUiLz4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBsb2NhbElkPSIxOCIgbG9jYXRvcj0iNTk6MS02MDoxMSIgbmFtZT0iTGFzdCBuYW1lIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkYXRhRWxlbWVudCIgdmFsdWU9IkFOQy5BLkRFMyBMYXN0IG5hbWUiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iQ2xpZW50J3MgZmFtaWx5IG5hbWUgb3IgbGFzdCBuYW1lIi8+DQogICAgICAgICAgICA8YTpzIHI9IjE4Ij4NCiAgICAgICAgICAgICAgIDxhOnM+LyoKICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFMyBMYXN0IG5hbWUKICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMKICBAZGVzY3JpcHRpb246IENsaWVudCdzIGZhbWlseSBuYW1lIG9yIGxhc3QgbmFtZQoqLwpkZWZpbmUgJnF1b3Q7TGFzdCBuYW1lJnF1b3Q7OgogIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cyByPSIxNyI+DQogICAgICAgICAgICAgICAgICA8YTpzPltQYXRpZW50XTwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjE3IiBsb2NhdG9yPSI2MDozLTYwOjExIiBkYXRhVHlwZT0iZmhpcjpQYXRpZW50IiB0ZW1wbGF0ZUlkPSJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUGF0aWVudCIgeHNpOnR5cGU9IlJldHJpZXZlIi8+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbG9jYWxJZD0iMjAiIGxvY2F0b3I9IjY3OjEtNjg6MTEiIG5hbWU9IkRhdGUgb2YgYmlydGgiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRhdGFFbGVtZW50IiB2YWx1ZT0iQU5DLkEuREU1IERhdGUgb2YgYmlydGgiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iVGhlIGNsaWVudCdzIGRhdGUgb2YgYmlydGggKERPQiksIGlmIGtub3duIi8+DQogICAgICAgICAgICA8YTpzIHI9IjIwIj4NCiAgICAgICAgICAgICAgIDxhOnM+LyoKICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFNSBEYXRlIG9mIGJpcnRoCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzCiAgQGRlc2NyaXB0aW9uOiBUaGUgY2xpZW50J3MgZGF0ZSBvZiBiaXJ0aCAoRE9CKSwgaWYga25vd24KKi8KZGVmaW5lICZxdW90O0RhdGUgb2YgYmlydGgmcXVvdDs6CiAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzIHI9IjE5Ij4NCiAgICAgICAgICAgICAgICAgIDxhOnM+W1BhdGllbnRdPC9hOnM+DQogICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iMTkiIGxvY2F0b3I9IjY4OjMtNjg6MTEiIGRhdGFUeXBlPSJmaGlyOlBhdGllbnQiIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9QYXRpZW50IiB4c2k6dHlwZT0iUmV0cmlldmUiLz4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBsb2NhbElkPSIyMiIgbG9jYXRvcj0iNzU6MS03NjoxMSIgbmFtZT0iQWRkcmVzcyIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGF0YUVsZW1lbnQiIHZhbHVlPSJBTkMuQS5ERTcgQWRkcmVzcyIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJhY3Rpdml0eSIgdmFsdWU9IkFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGVzY3JpcHRpb24iIHZhbHVlPSJDbGllbnQncyBob21lIGFkZHJlc3Mgb3IgYWRkcmVzcyB0aGF0IHRoZSBjbGllbnQgaXMgY29uc2VudGluZyB0byBkaXNjbG9zZSIvPg0KICAgICAgICAgICAgPGE6cyByPSIyMiI+DQogICAgICAgICAgICAgICA8YTpzPi8qCiAgQGRhdGFFbGVtZW50OiBBTkMuQS5ERTcgQWRkcmVzcwogIEBhY3Rpdml0eTogQU5DLkE0IEdhdGhlciBjbGllbnQgZGV0YWlscwogIEBkZXNjcmlwdGlvbjogQ2xpZW50J3MgaG9tZSBhZGRyZXNzIG9yIGFkZHJlc3MgdGhhdCB0aGUgY2xpZW50IGlzIGNvbnNlbnRpbmcgdG8gZGlzY2xvc2UKKi8KZGVmaW5lICZxdW90O0FkZHJlc3MmcXVvdDs6CiAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzIHI9IjIxIj4NCiAgICAgICAgICAgICAgICAgIDxhOnM+W1BhdGllbnRdPC9hOnM+DQogICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iMjEiIGxvY2F0b3I9Ijc2OjMtNzY6MTEiIGRhdGFUeXBlPSJmaGlyOlBhdGllbnQiIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9QYXRpZW50IiB4c2k6dHlwZT0iUmV0cmlldmUiLz4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBsb2NhbElkPSIyNCIgbG9jYXRvcj0iODM6MS04NDoxMSIgbmFtZT0iTW9iaWxlIHBob25lIG51bWJlciIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGF0YUVsZW1lbnQiIHZhbHVlPSJBTkMuQS5ERTggTW9iaWxlIHBob25lIG51bWJlciIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJhY3Rpdml0eSIgdmFsdWU9IkFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGVzY3JpcHRpb24iIHZhbHVlPSJDbGllbnQncyBtb2JpbGUgcGhvbmUgbnVtYmVyIi8+DQogICAgICAgICAgICA8YTpzIHI9IjI0Ij4NCiAgICAgICAgICAgICAgIDxhOnM+LyoKICBAZGF0YUVsZW1lbnQ6IEFOQy5BLkRFOCBNb2JpbGUgcGhvbmUgbnVtYmVyCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzCiAgQGRlc2NyaXB0aW9uOiBDbGllbnQncyBtb2JpbGUgcGhvbmUgbnVtYmVyCiovCmRlZmluZSAmcXVvdDtNb2JpbGUgcGhvbmUgbnVtYmVyJnF1b3Q7OgogIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cyByPSIyMyI+DQogICAgICAgICAgICAgICAgICA8YTpzPltQYXRpZW50XTwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjIzIiBsb2NhdG9yPSI4NDozLTg0OjExIiBkYXRhVHlwZT0iZmhpcjpQYXRpZW50IiB0ZW1wbGF0ZUlkPSJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUGF0aWVudCIgeHNpOnR5cGU9IlJldHJpZXZlIi8+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbG9jYWxJZD0iMjYiIGxvY2F0b3I9IjkxOjEtOTI6MTEiIG5hbWU9IkFsdGVybmF0aXZlIGNvbnRhY3QncyBuYW1lIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkYXRhRWxlbWVudCIgdmFsdWU9IkFOQy5BLkRFMTAgQWx0ZXJuYXRpdmUgY29udGFjdCdzIG5hbWUiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iTmFtZSBvZiBhbiBhbHRlcm5hdGl2ZSBjb250YWN0LCB3aGljaCBjb3VsZCBiZSBuZXh0IG9mIGtpbiAoZS5nLiBwYXJ0bmVyLCBtb3RoZXIsIHNpYmxpbmcpOyB0aGUgYWx0ZXJuYXRpdmUgY29udGFjdCB3b3VsZCBiZSB1c2VkIGluIHRoZSBjYXNlIG9mIGFuIGVtZXJnZW5jeSBzaXR1YXRpb24iLz4NCiAgICAgICAgICAgIDxhOnMgcj0iMjYiPg0KICAgICAgICAgICAgICAgPGE6cz4vKgogIEBkYXRhRWxlbWVudDogQU5DLkEuREUxMCBBbHRlcm5hdGl2ZSBjb250YWN0J3MgbmFtZQogIEBhY3Rpdml0eTogQU5DLkE0IEdhdGhlciBjbGllbnQgZGV0YWlscwogIEBkZXNjcmlwdGlvbjogTmFtZSBvZiBhbiBhbHRlcm5hdGl2ZSBjb250YWN0LCB3aGljaCBjb3VsZCBiZSBuZXh0IG9mIGtpbiAoZS5nLiBwYXJ0bmVyLCBtb3RoZXIsIHNpYmxpbmcpOyB0aGUgYWx0ZXJuYXRpdmUgY29udGFjdCB3b3VsZCBiZSB1c2VkIGluIHRoZSBjYXNlIG9mIGFuIGVtZXJnZW5jeSBzaXR1YXRpb24KKi8KZGVmaW5lICZxdW90O0FsdGVybmF0aXZlIGNvbnRhY3QncyBuYW1lJnF1b3Q7OgogIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cyByPSIyNSI+DQogICAgICAgICAgICAgICAgICA8YTpzPltQYXRpZW50XTwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjI1IiBsb2NhdG9yPSI5MjozLTkyOjExIiBkYXRhVHlwZT0iZmhpcjpQYXRpZW50IiB0ZW1wbGF0ZUlkPSJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUGF0aWVudCIgeHNpOnR5cGU9IlJldHJpZXZlIi8+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbG9jYWxJZD0iMjgiIGxvY2F0b3I9Ijk5OjEtMTAwOjExIiBuYW1lPSJBbHRlcm5hdGl2ZSBjb250YWN0J3MgcGhvbmUgbnVtYmVyIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkYXRhRWxlbWVudCIgdmFsdWU9IkFOQy5BLkRFMTEgQWx0ZXJuYXRpdmUgY29udGFjdCdzIHBob25lIG51bWJlciIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJhY3Rpdml0eSIgdmFsdWU9IkFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGVzY3JpcHRpb24iIHZhbHVlPSJQaG9uZSBudW1iZXIgb2YgdGhlIGFsdGVybmF0aXZlIGNvbnRhY3QiLz4NCiAgICAgICAgICAgIDxhOnMgcj0iMjgiPg0KICAgICAgICAgICAgICAgPGE6cz4vKgogIEBkYXRhRWxlbWVudDogQU5DLkEuREUxMSBBbHRlcm5hdGl2ZSBjb250YWN0J3MgcGhvbmUgbnVtYmVyCiAgQGFjdGl2aXR5OiBBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzCiAgQGRlc2NyaXB0aW9uOiBQaG9uZSBudW1iZXIgb2YgdGhlIGFsdGVybmF0aXZlIGNvbnRhY3QKKi8KZGVmaW5lICZxdW90O0FsdGVybmF0aXZlIGNvbnRhY3QncyBwaG9uZSBudW1iZXImcXVvdDs6CiAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzIHI9IjI3Ij4NCiAgICAgICAgICAgICAgICAgIDxhOnM+W1BhdGllbnRdPC9hOnM+DQogICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iMjciIGxvY2F0b3I9IjEwMDozLTEwMDoxMSIgZGF0YVR5cGU9ImZoaXI6UGF0aWVudCIgdGVtcGxhdGVJZD0iaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BhdGllbnQiIHhzaTp0eXBlPSJSZXRyaWV2ZSIvPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIGxvY2FsSWQ9IjMwIiBsb2NhdG9yPSIxMDc6MS0xMDg6MTEiIG5hbWU9IldvbWFuIHdhbnRzIHRvIHJlY2VpdmUgcmVtaW5kZXJzIGR1cmluZyBwcmVnbmFuY3kiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRhdGFFbGVtZW50IiB2YWx1ZT0iQU5DLkEuREU5IFdvbWFuIHdhbnRzIHRvIHJlY2VpdmUgcmVtaW5kZXJzIGR1cmluZyBwcmVnbmFuY3kiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuQTQgR2F0aGVyIGNsaWVudCBkZXRhaWxzIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iV2hldGhlciBvciBub3QgdGhlIHdvbWFuIHdhbnRzIHRvIHJlY2VpdmUgU01TIG9yIG90aGVyIG1lc3NhZ2VzIHJlZ2FyZGluZyBoZXIgQU5DIGNvbnRhY3RzIGFuZCBoZWFsdGggc3RhdHVzIGR1cmluZyBwcmVnbmFuY3kiLz4NCiAgICAgICAgICAgIDxhOnMgcj0iMzAiPg0KICAgICAgICAgICAgICAgPGE6cz4vKgogIEBkYXRhRWxlbWVudDogQU5DLkEuREU5IFdvbWFuIHdhbnRzIHRvIHJlY2VpdmUgcmVtaW5kZXJzIGR1cmluZyBwcmVnbmFuY3kKICBAYWN0aXZpdHk6IEFOQy5BNCBHYXRoZXIgY2xpZW50IGRldGFpbHMKICBAZGVzY3JpcHRpb246IFdoZXRoZXIgb3Igbm90IHRoZSB3b21hbiB3YW50cyB0byByZWNlaXZlIFNNUyBvciBvdGhlciBtZXNzYWdlcyByZWdhcmRpbmcgaGVyIEFOQyBjb250YWN0cyBhbmQgaGVhbHRoIHN0YXR1cyBkdXJpbmcgcHJlZ25hbmN5CiovCmRlZmluZSAmcXVvdDtXb21hbiB3YW50cyB0byByZWNlaXZlIHJlbWluZGVycyBkdXJpbmcgcHJlZ25hbmN5JnF1b3Q7OgogIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cyByPSIyOSI+DQogICAgICAgICAgICAgICAgICA8YTpzPltQYXRpZW50XTwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjI5IiBsb2NhdG9yPSIxMDg6My0xMDg6MTEiIGRhdGFUeXBlPSJmaGlyOlBhdGllbnQiIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9QYXRpZW50IiB4c2k6dHlwZT0iUmV0cmlldmUiLz4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBsb2NhbElkPSIzMiIgbG9jYXRvcj0iMTE1OjEtMTE2OjQwIiBuYW1lPSJDby1oYWJpdGFudHMiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRhdGFFbGVtZW50IiB2YWx1ZT0iQU5DLkEuREUxMyBDby1oYWJpdGFudHMiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuQTcgQ3JlYXRlIGNsaWVudCByZWNvcmQ/T1I/QU5DLkE4LiBWYWxpZGF0ZSBjbGllbnQgZGV0YWlscyIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkZXNjcmlwdGlvbiIgdmFsdWU9IldobyBkb2VzIHRoZSBjbGllbnQgbGl2ZSB3aXRoPyBJdCBpcyBpbXBvcnRhbnQgdG8ga25vdyB3aGV0aGVyIGNsaWVudCBsaXZlcyB3aXRoIHBhcmVudHMsIG90aGVyIGZhbWlseSBtZW1iZXJzLCBhIHBhcnRuZXIsIGZyaWVuZHMsIGV0Yy4iLz4NCiAgICAgICAgICAgIDxhOnMgcj0iMzIiPg0KICAgICAgICAgICAgICAgPGE6cz4vKgogIEBkYXRhRWxlbWVudDogQU5DLkEuREUxMyBDby1oYWJpdGFudHMKICBAYWN0aXZpdHk6IEFOQy5BNyBDcmVhdGUgY2xpZW50IHJlY29yZD9PUj9BTkMuQTguIFZhbGlkYXRlIGNsaWVudCBkZXRhaWxzCiAgQGRlc2NyaXB0aW9uOiBXaG8gZG9lcyB0aGUgY2xpZW50IGxpdmUgd2l0aD8gSXQgaXMgaW1wb3J0YW50IHRvIGtub3cgd2hldGhlciBjbGllbnQgbGl2ZXMgd2l0aCBwYXJlbnRzLCBvdGhlciBmYW1pbHkgbWVtYmVycywgYSBwYXJ0bmVyLCBmcmllbmRzLCBldGMuCiovCmRlZmluZSAmcXVvdDtDby1oYWJpdGFudHMmcXVvdDs6CiAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzIHI9IjMxIj4NCiAgICAgICAgICAgICAgICAgIDxhOnM+W09ic2VydmF0aW9uOiA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnM+DQogICAgICAgICAgICAgICAgICAgICA8YTpzPkN4LiZxdW90O0NvLWhhYml0YW50cyBDb2RlcyZxdW90OzwvYTpzPg0KICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICA8YTpzPl08L2E6cz4NCiAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICA8L2Fubm90YXRpb24+DQogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSIzMSIgbG9jYXRvcj0iMTE2OjMtMTE2OjQwIiBkYXRhVHlwZT0iZmhpcjpPYnNlcnZhdGlvbiIgdGVtcGxhdGVJZD0iaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL09ic2VydmF0aW9uIiBjb2RlUHJvcGVydHk9ImNvZGUiIGNvZGVDb21wYXJhdG9yPSJpbiIgeHNpOnR5cGU9IlJldHJpZXZlIj4NCiAgICAgICAgICAgIDxjb2RlcyBsb2NhdG9yPSIxMTY6MTctMTE2OjM5IiBuYW1lPSJDby1oYWJpdGFudHMgQ29kZXMiIGxpYnJhcnlOYW1lPSJDeCIgeHNpOnR5cGU9IlZhbHVlU2V0UmVmIi8+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbG9jYWxJZD0iMzQiIGxvY2F0b3I9IjEyMzoxLTEyNDo0MSIgbmFtZT0iUHJlZ25hbmN5IGNvbmZpcm1lZCIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGF0YUVsZW1lbnQiIHZhbHVlPSJBTkMuQjQuREUxIFByZWduYW5jeSBjb25maXJtZWQiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuQjQgQ29uZmlybSBwcmVnbmFuY3kiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGVzY3JpcHRpb24iIHZhbHVlPSJQcmVnbmFuY3kgaGFzIGJlZW4gY29uZmlybWVkIi8+DQogICAgICAgICAgICA8YTpzIHI9IjM0Ij4NCiAgICAgICAgICAgICAgIDxhOnM+LyoKICBAZGF0YUVsZW1lbnQ6IEFOQy5CNC5ERTEgUHJlZ25hbmN5IGNvbmZpcm1lZAogIEBhY3Rpdml0eTogQU5DLkI0IENvbmZpcm0gcHJlZ25hbmN5CiAgQGRlc2NyaXB0aW9uOiBQcmVnbmFuY3kgaGFzIGJlZW4gY29uZmlybWVkCiovCmRlZmluZSAmcXVvdDtQcmVnbmFuY3kgY29uZmlybWVkJnF1b3Q7OgogIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cyByPSIzMyI+DQogICAgICAgICAgICAgICAgICA8YTpzPltPYnNlcnZhdGlvbjogPC9hOnM+DQogICAgICAgICAgICAgICAgICA8YTpzPg0KICAgICAgICAgICAgICAgICAgICAgPGE6cz5DeC4mcXVvdDtQcmVnbmFuY3kgY29uZmlybWVkJnF1b3Q7PC9hOnM+DQogICAgICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnM+XTwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjMzIiBsb2NhdG9yPSIxMjQ6My0xMjQ6NDEiIGRhdGFUeXBlPSJmaGlyOk9ic2VydmF0aW9uIiB0ZW1wbGF0ZUlkPSJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vT2JzZXJ2YXRpb24iIGNvZGVQcm9wZXJ0eT0iY29kZSIgY29kZUNvbXBhcmF0b3I9In4iIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICA8Y29kZXMgeHNpOnR5cGU9IlRvTGlzdCI+DQogICAgICAgICAgICAgICA8b3BlcmFuZCBsb2NhdG9yPSIxMjQ6MTctMTI0OjQwIiBuYW1lPSJQcmVnbmFuY3kgY29uZmlybWVkIiBsaWJyYXJ5TmFtZT0iQ3giIHhzaTp0eXBlPSJDb2RlUmVmIi8+DQogICAgICAgICAgICA8L2NvZGVzPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIGxvY2FsSWQ9IjM2IiBsb2NhdG9yPSIxMzE6MS0xMzI6NDgiIG5hbWU9IkRhbmdlciBzaWducyIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGF0YUVsZW1lbnQiIHZhbHVlPSJBTkMuQjUuREU0OCBEYW5nZXIgc2lnbnMiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuQjUgUXVpY2sgY2hlY2siLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGVzY3JpcHRpb24iIHZhbHVlPSJCZWZvcmUgZWFjaCBjb250YWN0LCB0aGUgaGVhbHRoIHdvcmtlciBzaG91bGQgY2hlY2sgd2hldGhlciB0aGUgd29tYW4gaGFzIGFueSBvZiB0aGUgZGFuZ2VyIHNpZ25zIGxpc3RlZCBoZXJlIOKAkyBpZiB5ZXMsIHNoZSBzaG91bGQgcmVmZXIgdG8gdGhlIGhvc3BpdGFsIHVyZ2VudGx5OyBpZiBubywgc2hlIHNob3VsZCBjb250aW51ZSB0byB0aGUgbm9ybWFsIGNvbnRhY3QiLz4NCiAgICAgICAgICAgIDxhOnMgcj0iMzYiPg0KICAgICAgICAgICAgICAgPGE6cz4vKgogIEBkYXRhRWxlbWVudDogQU5DLkI1LkRFNDggRGFuZ2VyIHNpZ25zCiAgQGFjdGl2aXR5OiBBTkMuQjUgUXVpY2sgY2hlY2sKICBAZGVzY3JpcHRpb246IEJlZm9yZSBlYWNoIGNvbnRhY3QsIHRoZSBoZWFsdGggd29ya2VyIHNob3VsZCBjaGVjayB3aGV0aGVyIHRoZSB3b21hbiBoYXMgYW55IG9mIHRoZSBkYW5nZXIgc2lnbnMgbGlzdGVkIGhlcmUg4oCTIGlmIHllcywgc2hlIHNob3VsZCByZWZlciB0byB0aGUgaG9zcGl0YWwgdXJnZW50bHk7IGlmIG5vLCBzaGUgc2hvdWxkIGNvbnRpbnVlIHRvIHRoZSBub3JtYWwgY29udGFjdAoqLwpkZWZpbmUgJnF1b3Q7RGFuZ2VyIHNpZ25zJnF1b3Q7OgogIDwvYTpzPg0KICAgICAgICAgICAgICAgPGE6cyByPSIzNSI+DQogICAgICAgICAgICAgICAgICA8YTpzPltPYnNlcnZhdGlvbjogPC9hOnM+DQogICAgICAgICAgICAgICAgICA8YTpzPg0KICAgICAgICAgICAgICAgICAgICAgPGE6cz5DeC4mcXVvdDtEYW5nZXIgc2lnbnMgQ29kZXMgR3JvdXBlciZxdW90OzwvYTpzPg0KICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICA8YTpzPl08L2E6cz4NCiAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICA8L2Fubm90YXRpb24+DQogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSIzNSIgbG9jYXRvcj0iMTMyOjMtMTMyOjQ4IiBkYXRhVHlwZT0iZmhpcjpPYnNlcnZhdGlvbiIgdGVtcGxhdGVJZD0iaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL09ic2VydmF0aW9uIiBjb2RlUHJvcGVydHk9ImNvZGUiIGNvZGVDb21wYXJhdG9yPSJpbiIgeHNpOnR5cGU9IlJldHJpZXZlIj4NCiAgICAgICAgICAgIDxjb2RlcyBsb2NhdG9yPSIxMzI6MTctMTMyOjQ3IiBuYW1lPSJEYW5nZXIgc2lnbnMgQ29kZXMgR3JvdXBlciIgbGlicmFyeU5hbWU9IkN4IiB4c2k6dHlwZT0iVmFsdWVTZXRSZWYiLz4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBsb2NhbElkPSIzOCIgbG9jYXRvcj0iMTM5OjEtMTQwOjU0IiBuYW1lPSJTcGVjaWZpYyBoZWFsdGggY29uY2VybihzKSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGF0YUVsZW1lbnQiIHZhbHVlPSJBTkMuQjUuREU1IFNwZWNpZmljIGhlYWx0aCBjb25jZXJuKHMpIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImFjdGl2aXR5IiB2YWx1ZT0iQU5DLkI1IFF1aWNrIGNoZWNrIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iSWYgdGhlIHdvbWFuIGNhbWUgdG8gdGhlIGZhY2lsaXR5IHdpdGggYSBzcGVjaWZpYyBoZWFsdGggY29uY2Vybiwgc2VsZWN0IHRoZSBoZWFsdGggY29uY2VybihzKSBmcm9tIHRoZSBsaXN0Ii8+DQogICAgICAgICAgICA8YTpzIHI9IjM4Ij4NCiAgICAgICAgICAgICAgIDxhOnM+LyoKICBAZGF0YUVsZW1lbnQ6IEFOQy5CNS5ERTUgU3BlY2lmaWMgaGVhbHRoIGNvbmNlcm4ocykKICBAYWN0aXZpdHk6IEFOQy5CNSBRdWljayBjaGVjawogIEBkZXNjcmlwdGlvbjogSWYgdGhlIHdvbWFuIGNhbWUgdG8gdGhlIGZhY2lsaXR5IHdpdGggYSBzcGVjaWZpYyBoZWFsdGggY29uY2Vybiwgc2VsZWN0IHRoZSBoZWFsdGggY29uY2VybihzKSBmcm9tIHRoZSBsaXN0CiovCmRlZmluZSAmcXVvdDtTcGVjaWZpYyBoZWFsdGggY29uY2VybihzKSZxdW90OzoKICA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnMgcj0iMzciPg0KICAgICAgICAgICAgICAgICAgPGE6cz5bT2JzZXJ2YXRpb246IDwvYTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz4NCiAgICAgICAgICAgICAgICAgICAgIDxhOnM+Q3guJnF1b3Q7U3BlY2lmaWMgaGVhbHRoIGNvbmNlcm4ocykgQ29kZXMmcXVvdDs8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz5dPC9hOnM+DQogICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iMzciIGxvY2F0b3I9IjE0MDozLTE0MDo1NCIgZGF0YVR5cGU9ImZoaXI6T2JzZXJ2YXRpb24iIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9PYnNlcnZhdGlvbiIgY29kZVByb3BlcnR5PSJjb2RlIiBjb2RlQ29tcGFyYXRvcj0iaW4iIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICA8Y29kZXMgbG9jYXRvcj0iMTQwOjE3LTE0MDo1MyIgbmFtZT0iU3BlY2lmaWMgaGVhbHRoIGNvbmNlcm4ocykgQ29kZXMiIGxpYnJhcnlOYW1lPSJDeCIgeHNpOnR5cGU9IlZhbHVlU2V0UmVmIi8+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbG9jYWxJZD0iNDAiIGxvY2F0b3I9IjE0NzoxLTE0ODo1NyIgbmFtZT0iUmVhc29uIGZvciBjbG9zaW5nIEFOQyByZWNvcmQiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRhdGFFbGVtZW50IiB2YWx1ZT0iQU5DLkVuZC4xIFJlYXNvbiBmb3IgY2xvc2luZyBBTkMgcmVjb3JkIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImFjdGl2aXR5IiB2YWx1ZT0iQU5DLkVuZCBFbmQiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGVzY3JpcHRpb24iIHZhbHVlPSJTZWxlY3QgdGhlIHJlYXNvbiB3aHkgeW91IGFyZSBjbG9zaW5nIHRoZSB3b21hbidzIEFOQyByZWNvcmQiLz4NCiAgICAgICAgICAgIDxhOnMgcj0iNDAiPg0KICAgICAgICAgICAgICAgPGE6cz4vKgogIEBkYXRhRWxlbWVudDogQU5DLkVuZC4xIFJlYXNvbiBmb3IgY2xvc2luZyBBTkMgcmVjb3JkCiAgQGFjdGl2aXR5OiBBTkMuRW5kIEVuZAogIEBkZXNjcmlwdGlvbjogU2VsZWN0IHRoZSByZWFzb24gd2h5IHlvdSBhcmUgY2xvc2luZyB0aGUgd29tYW4ncyBBTkMgcmVjb3JkCiovCmRlZmluZSAmcXVvdDtSZWFzb24gZm9yIGNsb3NpbmcgQU5DIHJlY29yZCZxdW90OzoKICA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnMgcj0iMzkiPg0KICAgICAgICAgICAgICAgICAgPGE6cz5bT2JzZXJ2YXRpb246IDwvYTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz4NCiAgICAgICAgICAgICAgICAgICAgIDxhOnM+Q3guJnF1b3Q7UmVhc29uIGZvciBjbG9zaW5nIEFOQyByZWNvcmQgQ29kZXMmcXVvdDs8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz5dPC9hOnM+DQogICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iMzkiIGxvY2F0b3I9IjE0ODozLTE0ODo1NyIgZGF0YVR5cGU9ImZoaXI6T2JzZXJ2YXRpb24iIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9PYnNlcnZhdGlvbiIgY29kZVByb3BlcnR5PSJjb2RlIiBjb2RlQ29tcGFyYXRvcj0iaW4iIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICA8Y29kZXMgbG9jYXRvcj0iMTQ4OjE3LTE0ODo1NiIgbmFtZT0iUmVhc29uIGZvciBjbG9zaW5nIEFOQyByZWNvcmQgQ29kZXMiIGxpYnJhcnlOYW1lPSJDeCIgeHNpOnR5cGU9IlZhbHVlU2V0UmVmIi8+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbG9jYWxJZD0iNDIiIGxvY2F0b3I9IjE1NToxLTE1NjozNSIgbmFtZT0iRGVsaXZlcnkgZGF0ZSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGF0YUVsZW1lbnQiIHZhbHVlPSJBTkMuRW5kLjEyIERlbGl2ZXJ5IGRhdGUiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuRW5kIEVuZCIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkZXNjcmlwdGlvbiIgdmFsdWU9IkRhdGUgb24gd2hpY2ggdGhlIHdvbWFuIGRlbGl2ZXJlZCIvPg0KICAgICAgICAgICAgPGE6cyByPSI0MiI+DQogICAgICAgICAgICAgICA8YTpzPi8qCiAgQGRhdGFFbGVtZW50OiBBTkMuRW5kLjEyIERlbGl2ZXJ5IGRhdGUKICBAYWN0aXZpdHk6IEFOQy5FbmQgRW5kCiAgQGRlc2NyaXB0aW9uOiBEYXRlIG9uIHdoaWNoIHRoZSB3b21hbiBkZWxpdmVyZWQKKi8KZGVmaW5lICZxdW90O0RlbGl2ZXJ5IGRhdGUmcXVvdDs6CiAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzIHI9IjQxIj4NCiAgICAgICAgICAgICAgICAgIDxhOnM+W09ic2VydmF0aW9uOiA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnM+DQogICAgICAgICAgICAgICAgICAgICA8YTpzPkN4LiZxdW90O0RlbGl2ZXJ5IGRhdGUmcXVvdDs8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz5dPC9hOnM+DQogICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iNDEiIGxvY2F0b3I9IjE1NjozLTE1NjozNSIgZGF0YVR5cGU9ImZoaXI6T2JzZXJ2YXRpb24iIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9PYnNlcnZhdGlvbiIgY29kZVByb3BlcnR5PSJjb2RlIiBjb2RlQ29tcGFyYXRvcj0ifiIgeHNpOnR5cGU9IlJldHJpZXZlIj4NCiAgICAgICAgICAgIDxjb2RlcyB4c2k6dHlwZT0iVG9MaXN0Ij4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2F0b3I9IjE1NjoxNy0xNTY6MzQiIG5hbWU9IkRlbGl2ZXJ5IGRhdGUiIGxpYnJhcnlOYW1lPSJDeCIgeHNpOnR5cGU9IkNvZGVSZWYiLz4NCiAgICAgICAgICAgIDwvY29kZXM+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbG9jYWxJZD0iNTQiIGxvY2F0b3I9IjE2MzoxLTE2NjozMCIgbmFtZT0iUGxhY2Ugb2YgZGVsaXZlcnkiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRhdGFFbGVtZW50IiB2YWx1ZT0iQU5DLkVuZC4xMyBQbGFjZSBvZiBkZWxpdmVyeSIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJhY3Rpdml0eSIgdmFsdWU9IkFOQy5FbmQgRW5kIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iUGxhY2Ugd2hlcmUgdGhlIHdvbWFuIGRlbGl2ZXJlZCIvPg0KICAgICAgICAgICAgPGE6cyByPSI1NCI+DQogICAgICAgICAgICAgICA8YTpzPi8qCiAgQGRhdGFFbGVtZW50OiBBTkMuRW5kLjEzIFBsYWNlIG9mIGRlbGl2ZXJ5CiAgQGFjdGl2aXR5OiBBTkMuRW5kIEVuZAogIEBkZXNjcmlwdGlvbjogUGxhY2Ugd2hlcmUgdGhlIHdvbWFuIGRlbGl2ZXJlZAoqLwpkZWZpbmUgJnF1b3Q7UGxhY2Ugb2YgZGVsaXZlcnkmcXVvdDs6CiAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzIHI9IjUzIj4NCiAgICAgICAgICAgICAgICAgIDxhOnM+DQogICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjQ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNDMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSI0MyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPltFbmNvdW50ZXI6IDwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+Q3guJnF1b3Q7UGxhY2Ugb2YgZGVsaXZlcnkgQ29kZXMmcXVvdDs8L2E6cz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz5dPC9hOnM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4gRTwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnM+CiAgICA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNDgiPg0KICAgICAgICAgICAgICAgICAgICAgPGE6cz53aGVyZSA8L2E6cz4NCiAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNDgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSI0NiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjQ1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+RTwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPi48L2E6cz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNDYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz5zdGF0dXM8L2E6cz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICAgICAgICA8YTpzPiA9IDwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSI0NyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPidmaW5pc2hlZCc8L2E6cz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnM+CiAgICA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNTIiPg0KICAgICAgICAgICAgICAgICAgICAgPGE6cz5yZXR1cm4gPC9hOnM+DQogICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjUxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSI0OSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPkU8L2E6cz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4uPC9hOnM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjUwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+bG9jYXRpb248L2E6cz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICAgICAgICA8YTpzPi48L2E6cz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz5sb2NhdGlvbjwvYTpzPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjUzIiBsb2NhdG9yPSIxNjQ6My0xNjY6MzAiIHhzaTp0eXBlPSJRdWVyeSI+DQogICAgICAgICAgICA8c291cmNlIGxvY2FsSWQ9IjQ0IiBsb2NhdG9yPSIxNjQ6My0xNjQ6NDUiIGFsaWFzPSJFIj4NCiAgICAgICAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjQzIiBsb2NhdG9yPSIxNjQ6My0xNjQ6NDMiIGRhdGFUeXBlPSJmaGlyOkVuY291bnRlciIgdGVtcGxhdGVJZD0iaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0VuY291bnRlciIgY29kZVByb3BlcnR5PSJ0eXBlIiBjb2RlQ29tcGFyYXRvcj0iaW4iIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICA8Y29kZXMgbG9jYXRvcj0iMTY0OjE1LTE2NDo0MiIgbmFtZT0iUGxhY2Ugb2YgZGVsaXZlcnkgQ29kZXMiIGxpYnJhcnlOYW1lPSJDeCIgeHNpOnR5cGU9IlZhbHVlU2V0UmVmIi8+DQogICAgICAgICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgIDx3aGVyZSBsb2NhbElkPSI0OCIgbG9jYXRvcj0iMTY1OjUtMTY1OjMxIiB4c2k6dHlwZT0iRXF1YWwiPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iVG9TdHJpbmciIGxpYnJhcnlOYW1lPSJGSElSSGVscGVycyIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjQ2IiBsb2NhdG9yPSIxNjU6MTEtMTY1OjE4IiBwYXRoPSJzdGF0dXMiIHNjb3BlPSJFIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjQ3IiBsb2NhdG9yPSIxNjU6MjItMTY1OjMxIiB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iZmluaXNoZWQiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICA8L3doZXJlPg0KICAgICAgICAgICAgPHJldHVybiBsb2NhbElkPSI1MiIgbG9jYXRvcj0iMTY2OjUtMTY2OjMwIj4NCiAgICAgICAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjUxIiBsb2NhdG9yPSIxNjY6MTItMTY2OjMwIiB4c2k6dHlwZT0iUXVlcnkiPg0KICAgICAgICAgICAgICAgICAgPHNvdXJjZSBhbGlhcz0iJHRoaXMiPg0KICAgICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iNTAiIGxvY2F0b3I9IjE2NjoxMi0xNjY6MjEiIHBhdGg9ImxvY2F0aW9uIiBzY29wZT0iRSIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+DQogICAgICAgICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgICAgICAgIDx3aGVyZSB4c2k6dHlwZT0iTm90Ij4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJJc051bGwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0ibG9jYXRpb24iIHhzaTp0eXBlPSJQcm9wZXJ0eSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIG5hbWU9IiR0aGlzIiB4c2k6dHlwZT0iQWxpYXNSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgIDwvd2hlcmU+DQogICAgICAgICAgICAgICAgICA8cmV0dXJuIGRpc3RpbmN0PSJmYWxzZSI+DQogICAgICAgICAgICAgICAgICAgICA8ZXhwcmVzc2lvbiBwYXRoPSJsb2NhdGlvbiIgeHNpOnR5cGU9IlByb3BlcnR5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgbmFtZT0iJHRoaXMiIHhzaTp0eXBlPSJBbGlhc1JlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgICAgICAgICAgPC9yZXR1cm4+DQogICAgICAgICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICAgICAgICA8L3JldHVybj4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBsb2NhbElkPSI1NiIgbG9jYXRvcj0iMTc0OjEtMTc1OjM1IiBuYW1lPSJQcmV0ZXJtIEJpcnRoIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkYXRhRWxlbWVudCIgdmFsdWU9IkFOQy5FbmQuMTcgUHJldGVybSBCaXJ0aCIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJhY3Rpdml0eSIgdmFsdWU9IkFOQy5FbmQgRW5kIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iVGhlIHdvbWFuIGdhdmUgYmlydGggd2hlbiB0aGUgZ2VzdGF0aW9uYWwgYWdlIHdhcyBsZXNzIHRoYW4gMzcgd2Vla3MiLz4NCiAgICAgICAgICAgIDxhOnMgcj0iNTYiPg0KICAgICAgICAgICAgICAgPGE6cz4vKgogIEBkYXRhRWxlbWVudDogQU5DLkVuZC4xNyBQcmV0ZXJtIEJpcnRoCiAgQGFjdGl2aXR5OiBBTkMuRW5kIEVuZAogIEBkZXNjcmlwdGlvbjogVGhlIHdvbWFuIGdhdmUgYmlydGggd2hlbiB0aGUgZ2VzdGF0aW9uYWwgYWdlIHdhcyBsZXNzIHRoYW4gMzcgd2Vla3MKKi8KZGVmaW5lICZxdW90O1ByZXRlcm0gQmlydGgmcXVvdDs6CiAgPC9hOnM+DQogICAgICAgICAgICAgICA8YTpzIHI9IjU1Ij4NCiAgICAgICAgICAgICAgICAgIDxhOnM+W09ic2VydmF0aW9uOiA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnM+DQogICAgICAgICAgICAgICAgICAgICA8YTpzPkN4LiZxdW90O1ByZXRlcm0gQmlydGgmcXVvdDs8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz5dPC9hOnM+DQogICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgPC9hbm5vdGF0aW9uPg0KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iNTUiIGxvY2F0b3I9IjE3NTozLTE3NTozNSIgZGF0YVR5cGU9ImZoaXI6T2JzZXJ2YXRpb24iIHRlbXBsYXRlSWQ9Imh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9PYnNlcnZhdGlvbiIgY29kZVByb3BlcnR5PSJjb2RlIiBjb2RlQ29tcGFyYXRvcj0ifiIgeHNpOnR5cGU9IlJldHJpZXZlIj4NCiAgICAgICAgICAgIDxjb2RlcyB4c2k6dHlwZT0iVG9MaXN0Ij4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2F0b3I9IjE3NToxNy0xNzU6MzQiIG5hbWU9IlByZXRlcm0gQmlydGgiIGxpYnJhcnlOYW1lPSJDeCIgeHNpOnR5cGU9IkNvZGVSZWYiLz4NCiAgICAgICAgICAgIDwvY29kZXM+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbG9jYWxJZD0iNTgiIGxvY2F0b3I9IjE4MjoxLTE4Mzo0MSIgbmFtZT0iRGVsaXZlcnkgbW9kZSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGF0YUVsZW1lbnQiIHZhbHVlPSJBTkMuRW5kLjE4IERlbGl2ZXJ5IG1vZGUiLz4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iYWN0aXZpdHkiIHZhbHVlPSJBTkMuRW5kIEVuZCIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJkZXNjcmlwdGlvbiIgdmFsdWU9IkhvdyB0aGUgd29tYW4gZ2F2ZSBiaXJ0aC9kZWxpdmVyZWQiLz4NCiAgICAgICAgICAgIDxhOnMgcj0iNTgiPg0KICAgICAgICAgICAgICAgPGE6cz4vKgogIEBkYXRhRWxlbWVudDogQU5DLkVuZC4xOCBEZWxpdmVyeSBtb2RlCiAgQGFjdGl2aXR5OiBBTkMuRW5kIEVuZAogIEBkZXNjcmlwdGlvbjogSG93IHRoZSB3b21hbiBnYXZlIGJpcnRoL2RlbGl2ZXJlZAoqLwpkZWZpbmUgJnF1b3Q7RGVsaXZlcnkgbW9kZSZxdW90OzoKICA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnMgcj0iNTciPg0KICAgICAgICAgICAgICAgICAgPGE6cz5bT2JzZXJ2YXRpb246IDwvYTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz4NCiAgICAgICAgICAgICAgICAgICAgIDxhOnM+Q3guJnF1b3Q7RGVsaXZlcnkgbW9kZSBDb2RlcyZxdW90OzwvYTpzPg0KICAgICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICAgICAgICA8YTpzPl08L2E6cz4NCiAgICAgICAgICAgICAgIDwvYTpzPg0KICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICA8L2Fubm90YXRpb24+DQogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSI1NyIgbG9jYXRvcj0iMTgzOjMtMTgzOjQxIiBkYXRhVHlwZT0iZmhpcjpPYnNlcnZhdGlvbiIgdGVtcGxhdGVJZD0iaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL09ic2VydmF0aW9uIiBjb2RlUHJvcGVydHk9ImNvZGUiIGNvZGVDb21wYXJhdG9yPSJpbiIgeHNpOnR5cGU9IlJldHJpZXZlIj4NCiAgICAgICAgICAgIDxjb2RlcyBsb2NhdG9yPSIxODM6MTctMTgzOjQwIiBuYW1lPSJEZWxpdmVyeSBtb2RlIENvZGVzIiBsaWJyYXJ5TmFtZT0iQ3giIHhzaTp0eXBlPSJWYWx1ZVNldFJlZiIvPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIGxvY2FsSWQ9IjYwIiBsb2NhdG9yPSIxOTA6MS0xOTE6MzQiIG5hbWU9IkJpcnRoIHdlaWdodCIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4NCiAgICAgICAgICAgIDxhOnQgbmFtZT0iZGF0YUVsZW1lbnQiIHZhbHVlPSJBTkMuRW5kLjIzIEJpcnRoIHdlaWdodCIvPg0KICAgICAgICAgICAgPGE6dCBuYW1lPSJhY3Rpdml0eSIgdmFsdWU9IkFOQy5FbmQgRW5kIi8+DQogICAgICAgICAgICA8YTp0IG5hbWU9ImRlc2NyaXB0aW9uIiB2YWx1ZT0iRW50ZXIgdGhlIGJpcnRoIHdlaWdodCBvZiB0aGUgYmFieSBpbiBrZyIvPg0KICAgICAgICAgICAgPGE6cyByPSI2MCI+DQogICAgICAgICAgICAgICA8YTpzPi8qCiAgQGRhdGFFbGVtZW50OiBBTkMuRW5kLjIzIEJpcnRoIHdlaWdodAogIEBhY3Rpdml0eTogQU5DLkVuZCBFbmQKICBAZGVzY3JpcHRpb246IEVudGVyIHRoZSBiaXJ0aCB3ZWlnaHQgb2YgdGhlIGJhYnkgaW4ga2cKKi8KZGVmaW5lICZxdW90O0JpcnRoIHdlaWdodCZxdW90OzoKICA8L2E6cz4NCiAgICAgICAgICAgICAgIDxhOnMgcj0iNTkiPg0KICAgICAgICAgICAgICAgICAgPGE6cz5bT2JzZXJ2YXRpb246IDwvYTpzPg0KICAgICAgICAgICAgICAgICAgPGE6cz4NCiAgICAgICAgICAgICAgICAgICAgIDxhOnM+Q3guJnF1b3Q7QmlydGggd2VpZ2h0JnF1b3Q7PC9hOnM+DQogICAgICAgICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgICAgICAgICAgIDxhOnM+XTwvYTpzPg0KICAgICAgICAgICAgICAgPC9hOnM+DQogICAgICAgICAgICA8L2E6cz4NCiAgICAgICAgIDwvYW5ub3RhdGlvbj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjU5IiBsb2NhdG9yPSIxOTE6My0xOTE6MzQiIGRhdGFUeXBlPSJmaGlyOk9ic2VydmF0aW9uIiB0ZW1wbGF0ZUlkPSJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vT2JzZXJ2YXRpb24iIGNvZGVQcm9wZXJ0eT0iY29kZSIgY29kZUNvbXBhcmF0b3I9In4iIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICA8Y29kZXMgeHNpOnR5cGU9IlRvTGlzdCI+DQogICAgICAgICAgICAgICA8b3BlcmFuZCBsb2NhdG9yPSIxOTE6MTctMTkxOjMzIiBuYW1lPSJCaXJ0aCB3ZWlnaHQiIGxpYnJhcnlOYW1lPSJDeCIgeHNpOnR5cGU9IkNvZGVSZWYiLz4NCiAgICAgICAgICAgIDwvY29kZXM+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgIDwvc3RhdGVtZW50cz4NCjwvbGlicmFyeT4NCg=="
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}